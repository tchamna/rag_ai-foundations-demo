name: Build and deploy Python app to Azure Web App - tchamna-rag-ai-foundations-demo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Create and start virtual environment, install dependencies
        run: |
          python -m venv antenv
          source antenv/bin/activate
          pip install -r requirements.txt

      # üß© Ensure output.tar.gz and vectorstore are included
      - name: Verify important files exist
        run: |
          echo "Checking for output.tar.gz and vectorstore/"
          ls -lh output.tar.gz || echo "‚ö†Ô∏è output.tar.gz missing!"
          ls -R vectorstore/ || echo "‚ö†Ô∏è vectorstore folder missing!"

      # üïí Force-update timestamp to ensure redeploy
      - name: Force-update file timestamps
        run: |
          if [ -f output.tar.gz ]; then
            touch -m output.tar.gz
            echo "üïí Refreshed timestamp for output.tar.gz"
          fi

      # üì¶ Upload artifact for deployment
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            .
            output.tar.gz
            !antenv/
            !.git/
            !.github/
            !__pycache__/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_F5CDC0F80638430D8766CA02F8B5AC26 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_8C6CEF7FC8E740869F9990AB93966567 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_9D8C22EDA8A44F3DB8253C2A2661E4B9 }}

      # üß† Detect if vectorstore or output.tar.gz changed
      - name: Check if vectorstore or output changed
        id: change_check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -Eq '^(vectorstore/|output\.tar\.gz)'; then
            echo "vectorstore_changed=true" >> $GITHUB_ENV
            echo "‚úÖ Detected changes in vectorstore or output.tar.gz"
          else
            echo "vectorstore_changed=false" >> $GITHUB_ENV
            echo "‚ÑπÔ∏è No changes detected in vectorstore or output.tar.gz"
          fi

      # üßπ Clean existing files in Azure Web App (Kudu API)
      - name: Clean existing files
        if: env.vectorstore_changed == 'true'
        env:
          AZURE_WEBAPP_NAME: 'tchamna-rag-ai-foundations-demo'
          AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_F5CDC0F80638430D8766CA02F8B5AC26 }}
        run: |
          echo "üßπ Cleaning /home/site/wwwroot via Kudu API..."
          USER=$(echo "$AZURE_WEBAPP_PUBLISH_PROFILE" | grep -oP '(?<=userName=")[^"]+')
          PASS=$(echo "$AZURE_WEBAPP_PUBLISH_PROFILE" | grep -oP '(?<=userPWD=")[^"]+')
          KUDU_URL="https://$AZURE_WEBAPP_NAME.scm.azurewebsites.net/api/command"
          CMD="rm -rf /home/site/wwwroot/*"
          curl -u "$USER:$PASS" -X POST -H "Content-Type: application/json" \
            -d "{\"command\": \"$CMD\"}" "$KUDU_URL"
          echo "‚úÖ Cleanup complete."

      # üöÄ Deploy using ZipDeploy (force clean, overwrite)
      - name: Deploy to Azure via ZipDeploy
        env:
          AZURE_WEBAPP_NAME: 'tchamna-rag-ai-foundations-demo'
          AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_F5CDC0F80638430D8766CA02F8B5AC26 }}
        run: |
          echo "üöÄ Starting ZipDeploy to Azure..."
          zip -r deploy.zip .
          USER=$(echo "$AZURE_WEBAPP_PUBLISH_PROFILE" | grep -oP '(?<=userName=")[^"]+')
          PASS=$(echo "$AZURE_WEBAPP_PUBLISH_PROFILE" | grep -oP '(?<=userPWD=")[^"]+')
          DEPLOY_URL="https://$AZURE_WEBAPP_NAME.scm.azurewebsites.net/api/zipdeploy?isAsync=true&clean=true"
          echo "Uploading to $DEPLOY_URL ..."
          curl -v --retry 3 --retry-delay 10 -u "$USER:$PASS" --data-binary @deploy.zip "$DEPLOY_URL"
          echo "‚úÖ ZipDeploy completed successfully."

      # üîç Verify presence of output.tar.gz and vectorstore on Azure
      - name: Verify deployed files
        env:
          AZURE_WEBAPP_NAME: 'tchamna-rag-ai-foundations-demo'
          AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_F5CDC0F80638430D8766CA02F8B5AC26 }}
        run: |
          echo "üîç Checking deployed files in /home/site/wwwroot..."
          USER=$(echo "$AZURE_WEBAPP_PUBLISH_PROFILE" | grep -oP '(?<=userName=")[^"]+')
          PASS=$(echo "$AZURE_WEBAPP_PUBLISH_PROFILE" | grep -oP '(?<=userPWD=")[^"]+')
          KUDU_URL="https://$AZURE_WEBAPP_NAME.scm.azurewebsites.net/api/command"
          CMD="ls -lh /home/site/wwwroot | grep -E 'output.tar.gz|vectorstore'"
          curl -u "$USER:$PASS" -X POST -H "Content-Type: application/json" \
            -d "{\"command\": \"$CMD\"}" "$KUDU_URL"

      # üß© Disable Oryx (ensure Azure doesn‚Äôt rebuild)
      - name: Disable Oryx build during deployment
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name tchamna-rag-ai-foundations-demo \
              --resource-group rag-ai-foundations-demo-rg \
              --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false
            echo "üõë Oryx build disabled for future deployments."

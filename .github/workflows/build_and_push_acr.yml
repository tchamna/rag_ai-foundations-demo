name: Build backend image and deploy to ACR + App Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_38DE833436A341C0A545448B11A88D9F }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B88B45F0C5574C009FE3EA62FD610580 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_C23CE36AE8084CF1ADB1219965C42869 }}

      - name: Set variables
        id: vars
        run: |
          ACR_NAME=${{ secrets.ACR_NAME }}
          if [ -z "$ACR_NAME" ]; then
            echo "ACR_NAME is not set. Please add repository secret ACR_NAME with your Azure Container Registry name." >&2
            exit 1
          fi
          LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --query loginServer -o tsv)
          echo "LOGIN_SERVER=$LOGIN_SERVER" >> $GITHUB_OUTPUT
          IMAGE_NAME="$LOGIN_SERVER/${{ github.repository }}:latest"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Set AZURE_RG env
        run: |
          echo "AZURE_RG=${{ secrets.AZURE_RG }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          echo "Building image ${{ steps.vars.outputs.IMAGE_NAME }}"
          docker build -f Dockerfile.backend -t "${{ steps.vars.outputs.IMAGE_NAME }}" .

      - name: Login to ACR
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Push image to ACR
        run: |
          docker push "${{ steps.vars.outputs.IMAGE_NAME }}"

      - name: Configure App Service to use container image
        env:
          APP_NAME: 'tchamna-rag-ai-foundations-demo'
          AZURE_RG: ${{ env.AZURE_RG }}
        run: |
          echo "Using resource group: $AZURE_RG"
          az webapp config container set --name "$APP_NAME" --resource-group "$AZURE_RG" --docker-custom-image-name "${{ steps.vars.outputs.IMAGE_NAME }}" --docker-registry-server-url "https://${{ steps.vars.outputs.LOGIN_SERVER }}"
          # Ensure WEBSITES_PORT reflects the internal port exposed by the image (8000)
          az webapp config appsettings set --resource-group "$AZURE_RG" --name "$APP_NAME" --settings WEBSITES_PORT=8000
